@using HandBook.Models;
@model IEnumerable<Post>

@{
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .btn-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 24px;
        position: fixed;
        right: 20px;
        bottom: 20px;
        z-index: 9999;
    }

    .likeButton {
        background-color: transparent;
        border: none;
        color: #555;
        line-height: 1;
        padding: 0;
        transition: color 0.2s ease-in-out;
    }

    .commentButton, .shareButton {
        background-color: transparent;
        border: none;
        color: #555;
        line-height: 1;
        padding: 0;
    }

    .likeButton.liked {
        color: #ff385c;
    }

    .likeButton span {
        margin-left: 4px;
    }

    .image-container {
        width: 450px;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .fit-image {
        max-width: 100%;
        max-height: 100%;
    }

    .cr-us-name, .cr-us-name:hover {
        color: black;
        text-decoration: none;
    }

    .card-header {
        background: none;
    }

    .card, .card-header, .card-body {
        border: none;
    }

    .custom-date {
    }
</style>

<div class="container">
    <br />
    <br />
    <div class="row">
        <div class="col-12">
            @{
                List<int> userLikedCards = ViewBag.UserLikedCards;
                if (userLikedCards == null)
                {
                    userLikedCards = new List<int>();
                }
            }
            @if (Model != null)
            {
                @foreach (var item in Model)
                {
                    DateTime postDate = item.Time;

                    TimeSpan timeDifference = DateTime.Now - postDate;

                    double seconds = Math.Floor(timeDifference.TotalSeconds);
                    double minutes = Math.Floor(timeDifference.TotalMinutes);
                    double hours = Math.Floor(timeDifference.TotalHours);
                    double days = Math.Floor(timeDifference.TotalDays);


                    string displayString = "";

                    if (days > 365 || (days > 7 && postDate.Year != DateTime.Now.Year))
                    {
                        displayString = postDate.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    else if (days > 7)
                    {
                        displayString = postDate.ToString("MMMM d");
                    }
                    else if (days >= 1)
                    {
                        displayString = days == 1 ? "1 day ago" : $"{(int)days} days ago";
                    }
                    else if (hours >= 1)
                    {
                        displayString = hours == 1 ? "1 hour ago" : $"{(int)hours} hours ago";
                    }
                    else if (minutes >= 1)
                    {
                        displayString = minutes == 1 ? "1 minute ago" : $"{(int)minutes} minutes ago";
                    }
                    else
                    {
                        displayString = seconds == 1 ? "1 second ago" : $"{(int)seconds} seconds ago";
                    }
                    <div class="card" style="width: 470px">
                        <div class="card-header">
                            <div class="row justify-content-between w-100">
                                <div class="col-auto">
                                    <a class="card-title h5 cr-us-name" asp-controller="Home" asp-action="Account" asp-route-username="@item.CreatorUserName">
                                        &#64;@item.CreatorUserName
                                    </a>
                                </div>
                                <div class="col-auto p-0">
                                    <div class="custom-date">@displayString</div>
                                </div>
                            </div>
                        </div>

                        @{
                            var base64Image = Convert.ToBase64String(item.image);
                            ViewBag.ImageData = base64Image;

                            <img src="data:image;base64,@ViewBag.ImageData" style="border-radius:6px" alt="Image" class="fit-image">
                            var commentsCount = 0;
                            if (item.Comments != null)
                            {
                                commentsCount = item.Comments.Count();
                            }
                        }
                        <div class="card-body p-0 m-0">
                            <div class="row justify-content-center p-0 m-0">
                                <div class="col-10 pt-3">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <span class="likeCount" data-item-id="@item.Id">@item.AmountOfLikes likes</span>
                                        </div>
                                        <div>
                                            <span class="likeCount" data-item-id="@item.Id">@commentsCount comments</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center">
                                <hr class="col-11">
                            </div>

                            <div class="row">
                                <div class="col-12 d-flex justify-content-around">
                                    <div class="col-1 pt-2 text-center pb-3">
                                        <button class="likeButton" onclick="like(this,@item.Id)" data-count="@item.AmountOfLikes">
                                            @if (userLikedCards.Contains(item.Id))
                                            {
                                                <i class="fa-solid fa-heart liked fa-xl" style="color: #ff0000;"></i>
                                            }
                                            else
                                            {

                                                <i class="fa-regular fa-heart fa-xl" style="color: #000;"></i>
                                            }
                                        </button>
                                        <br>
                                    </div>
                                    <div class="col-1 pt-2 text-center pb-3">
                                        <button class="commentButton" onclick="toggleComments(@item.Id, this)">
                                            <i class="fa-regular fa-comment fa-xl"></i>
                                        </button>
                                        <br>
                                    </div>
                                    <div class="col-1 pt-2 text-center pb-3">
                                        <button class="shareButton" onclick="share(this,@item.Id)">
                                            <i class="fa-solid fa-share-from-square fa-xl"></i>
                                        </button>
                                        <br>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                }
            }
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            &nbsp;
        </div>
        <div class="col-auto">
            <a class="btn btn-primary btn-circle" asp-area="" asp-controller="Home" asp-action="AddAPost">
                <i class="fas fa-plus"></i>
            </a>
        </div>
    </div>
</div>

<script>
    function likeButtonClick(Id) {
        $.ajax({
            type: "POST",
            url: "/Home/IncrementOrDecrementLikeCount",
            data: { itemId: Id },
            success: function (result) {
                var likeCountElement = $('.likeCount[data-item-id="' + Id + '"]');
                likeCountElement.text(result);
            },
            error: function (result) {
                alert("Error: " + result.statusText);
            }
        });
    }

    function toggleComments(itemId, element) {
        const card = element.closest('.card');
        const cardId = `card-overlay-${itemId}`; // Create a unique ID for the card

        // Check if an overlay already exists for this card
        const existingOverlay = document.getElementById(cardId);

        if (existingOverlay) {
            // If overlay exists, remove it and enable scrolling
            existingOverlay.remove();
            document.body.style.overflow = '';
            return;
        }

        const overlay = document.createElement('div');
        overlay.id = cardId; // Set the ID for the overlay

        function disableScroll() {
            document.body.style.overflow = 'hidden';
        }

        function enableScroll() {
            document.body.style.overflow = '';
        }

        function handleClickOutside(event) {
            if (event.target === overlay) {
                enableScroll();
                overlay.remove();
                document.removeEventListener('click', handleClickOutside);
            }
        }

        if (card) {
            card.style.zIndex = 1000;

            overlay.style.position = 'fixed';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';

            const expandedArea = document.createElement('div');
            expandedArea.style.overflowY = 'scroll';

            card.appendChild(expandedArea);

            document.body.appendChild(overlay);

            disableScroll();

            document.addEventListener('click', handleClickOutside);
        }
    }

    function like(button, Id) {
        var card = button.closest(".card");
        var cardId = card.dataset.id;
        var count = parseInt(button.dataset.count) || 0;
        var likedCards = JSON.parse(sessionStorage.getItem("likedCards")) || {};

        var heartIcon = button.querySelector("i.fa-heart");


        if (heartIcon.classList.contains("liked")) {
            count--;
            button.dataset.count = count;
            button.innerHTML = ` <i class="fa-regular fa-heart fa-xl" style="color: #000;"></i>`;
            likeButtonClick(Id);
            delete likedCards[cardId];
        } else {
            count++;
            button.dataset.count = count;
            button.innerHTML = ` <i class="fa-solid fa-heart fa-xl liked" style="color: #ff0000;"></i>`;
            likeButtonClick(Id);
            likedCards[cardId] = true;
        }

        sessionStorage.setItem("likedCards", JSON.stringify(likedCards));
    }

</script>